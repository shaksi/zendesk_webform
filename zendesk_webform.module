<?php

function zendesk_webform_menu() {
  // Admin Settings.
  $items['admin/config/content/webform/zendesk'] = array(
    'title' => 'Zendesk settings',
    'description' => 'Configurate the zendesk API.',
    'page callback' => 'zendesk_webform_admin_languages',
    'access arguments' => array('administer zendesk webform'),
    'file' => 'zendesk_webform.admin.inc',
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/content/webform/zendesk/settings'] = array(
    'title' => 'Global Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zendesk_webform_admin_settings'),
    'access arguments' => array('administer zendesk webform'),
    'description' => 'Global configuration of zendesk.',
    'file' => 'zendesk_webform.admin.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/content/webform/default'] = array(
    'title' => 'Webform settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/content/webform/zendesk/default'] = array(
    'title' => 'Country settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/content/webform/zendesk/languages/%'] = array(
    'title' => 'Country settings',
    'title callback' => 'zendesk_webform_admin_config_title',
    'title arguments' => array(6),
    'description' => 'Configure a zendesk language.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zendesk_webform_language_admin_config_form', 6),
    'access arguments' => array('administer zendesk webform'),
    'file' => 'zendesk_webform.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function zendesk_webform_permission() {
  return array(
    'administer zendesk webform' => array(
      'title' => t('Administer Zendesk Webform configuration'),
    ),
  );
}

function zendesk_webform_admin_config_title($lang) {
  $languages = language_list('enabled');
  if (isset($languages[1][$lang])) {
    return t('Zendesk @lang', array('@lang' => $languages[1][$lang]->name));
  }
  return t('Zendesk unknown');
}

/**
 * Theme the node components form. Use a table to organize the components.
 *
 * @return
 *   Formatted HTML form, ready for display.
 */
function theme_zendesk_webform_components_form($variables) {
  $output = '';
  $output .= theme('table', array('header' => $variables['header'], 'rows' => $variables['rows'], 'attributes' => array('id' => 'webform-components')));
  $output .= drupal_render_children($variables['form']);
  return $output;
}

/**
 * Implements hook_theme().
 */
function zendesk_webform_theme() {
  $theme = array(
    'zendesk_webform_components_form' => array(
      'render element' => 'form',
    ),
  );
  return $theme;
}

/**
 * RIPPED OUT OF ZENDESK_FORMS.MODULE TO LIMIT MODULE BLOATING (look into later)
 * Performs a call to the Zendesk API with the given data.
 *
 * @param array $data
 *   The data to be sent to the API endpoint.
 * @param string $command
 *   The command to call at the endpoint. Will be a filename like "tickets.json"
 * or similar.
 * See http://developer.zendesk.com/documentation/rest_api/tickets.html and
 * https://support.zendesk.com/entries/21562288-Creating-a-Custom-HTML-Form-for-Ticket-Submission
 *
 * @return string
 *   The json response string.
 */
function zendesk_webform_api_call($data, $command, $type="POST") {
  global $conf;

  $json = json_encode($data);
  $zendesk_key = variable_get('zendesk_webform_api_key', '');
  $zendesk_url = variable_get('zendesk_webform_api_url', '');
  $zendesk_user = variable_get('zendesk_webform_api_user', '');

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
  curl_setopt($ch, CURLOPT_URL, $zendesk_url . '/api/v2/' . $command);
  curl_setopt($ch, CURLOPT_USERPWD, "$zendesk_user/token:$zendesk_key");
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $type);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
  curl_setopt($ch, CURLOPT_USERAGENT, 'MozillaXYZ/1.0');
  curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);

  //if proxy is set lets tunnel through it
  if (isSet($conf['proxy_server'])) {
    $usrpass = $conf['proxy_username'].':'.$conf['proxy_password'];
    curl_setopt($ch, CURLOPT_HEADER, false);
    curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
    curl_setopt($ch, CURLOPT_PROXYPORT, $conf['proxy_port']);
    curl_setopt($ch, CURLOPT_PROXY, $conf['proxy_server']);
    curl_setopt($ch, CURLOPT_PROXYUSERPWD, $usrpass);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
  }

  $output = curl_exec($ch);
  curl_close($ch);

  return json_decode($output);
}

/*
 * Submit function for the component edit form
 * We need to keep the zendesk fid.
 */
function zendesk_webform_component_form_submit($form, &$form_state) {
  $cid = $form_state['values']['cid'];
  $node = node_load($form_state['values']['nid']);
  if (isset($node->webform['components'][$cid]['extra']['zendesk_fid'])) {
    $form_state['values']['extra']['zendesk_fid'] = $node->webform['components'][$cid]['extra']['zendesk_fid'];
  }
}

/**
 * Implements hook_form_alter().
 */
function zendesk_webform_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'webform_component_edit_form') {
    array_unshift($form['#submit'], 'zendesk_webform_component_form_submit');
  }
  //add the zendesk group selection to the webform node.
  //When that form is submitted we use the groupID to forward to the right
  //zendesk group
  if ($form_id == 'webform_configure_form') {
    $node = $form['#node'];
    if (zendesk_webform_language_api_enabled($node)) {
      array_unshift($form['#submit'], 'zendesk_webform_configure_form_submit');

      $default = isset($node->zendesk_webform_group) ? $node->zendesk_webform_group : '';

      $zendesk_groups = zendesk_webform_list_group_field($default);
      $zendesk_groups['zendesk']['zendesk_group']['#description'] =
       t('Which Zendesk group should this forms submission go to');
      array_push($form, $zendesk_groups);
    }
  }

  if ($form_id == 'webform_components_form') {
    $node = $form['#node'];
    if (zendesk_webform_api_enabled($node)) {
      $form['#theme'] = 'zendesk_webform_components_form';
      $node = $form['#node'];
      $defaults = variable_get('zendesk_api', array());
      $lang = $node->language;

      $options = array();
      $fields = _zendesk_webform_fields_cleanup();

      $enabled_fields = new stdClass();
      $enabled_fields->ticket = $defaults[$lang]['fields']['zendesk_webform_allowed_fields_ticket'];
      $enabled_fields->user = $defaults[$lang]['fields']['zendesk_webform_allowed_fields_user'];
      //loop through both user fields and ticket fields,
      //comparing the fields IDs that have been saved to the
      //list of available fields we recieved from zendes.
      //As we only have enabled IDs,this is th best way to get field names
      foreach (array('user','ticket') as $field_type) {
        if (count($fields->{$field_type}) > 0 && count($enabled_fields->{$field_type})>0 ) {
          foreach ((array)$enabled_fields->{$field_type} as $id => $enabled) {
            if ($enabled) {
              $options[$id] = $fields->{$field_type}[$id];
            }
          }
        }
      }

      //for each of the webform, show a select list of the zendesk fields
      //this is where we create direct association
      foreach ($node->webform['components'] as $cid => $component) {
        $form['components'][$cid]['zendesk_fid'] = array(
          '#type' => 'select',
          '#title' => t('Zendesk'),
          '#options' => array(0 => 'None') + $options,
          '#default_value' => (isset($component['extra']['zendesk_fid']))?$component['extra']['zendesk_fid']:'description',//default to description
        );
      }
      array_unshift($form['#submit'], 'zendesk_webform_component_submit');
    }
  }

  if (preg_match("/webform_client_form_/i", $form_id)) {
    $node = $form['#node'];
    if (zendesk_webform_api_enabled($node)) {
      array_unshift($form['#submit'], 'zendesk_webform_ticket_submit');
    }
  }
}

function zendesk_webform_configure_form_submit($form, &$form_state) {
  $form['#node']->zendesk_webform_group = $form_state['values']['zendesk_webform_group'];
}

// checks if the api is enabled for the node language.
// returns true or false
function zendesk_webform_language_api_enabled($node) {
  $defaults = variable_get('zendesk_api', array());
  return isset($node->webform) && isset($defaults[$node->language]) && $defaults[$node->language]['status'];
}

// checks if the api is enabled for the node language and if a group has been
// assigned, which indicates finally that the node uses the api
// returns true or false
function zendesk_webform_api_enabled($node) {
  return zendesk_webform_language_api_enabled($node) && isset($node->zendesk_webform_group) && $node->zendesk_webform_group;
}

function zendesk_webform_component_submit($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  // Update all mandatory and weight values.
  $changes = FALSE;
  foreach ($node->webform['components'] as $cid => $component) {
    if (!isset($component['extra']['zendesk_fid']) || $component['extra']['zendesk_fid'] != $form_state['values']['components'][$cid]['zendesk_fid'] ) {
      $changes = TRUE;
      $node->webform['components'][$cid]['extra']['zendesk_fid'] = $form_state['values']['components'][$cid]['zendesk_fid'];
    }
  }
  if ($changes) {
    node_save($node);
  }
}

/**
 * Implements hook_node_load().
 *
 * Loads the rating information if available for any of the nodes in the
 * argument list.
 */
function zendesk_webform_node_load($nodes, $types) {
  // Now we need to make a list of revisions based on $our_types
  $nids = array();
  foreach ($nodes as $node) {
    if (zendesk_webform_language_api_enabled($node)) {
      $nids[]= $node->nid;
    }
  }

  if (!count($nids)) {
    return;
  }

  // When we read, we don't care about the node->nid; we look for the right
  // revision ID (node->vid).
  $result = db_select('zendesk_webform_node', 'e')
  ->fields('e', array('nid', 'vid', 'zgid'))
  ->where('e.nid IN (:nids)', array(':nids' => $nids))
  ->execute();

  foreach ($result as $record) {
    $nodes[$record->nid]->zendesk_webform_group = $record->zgid;
  }
}

/**
 * Implements hook_node_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function zendesk_webform_node_insert($node) {
  if (zendesk_webform_language_api_enabled($node)
  && isSet($node->zendesk_webform_group)) {
    // Notice that we are ignoring any revision information using $node->nid
    db_insert('zendesk_webform_node')
    ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'zgid' => $node->zendesk_webform_group,
    ))
    ->execute();
  }
}

/**
 * Implements hook_node_delete().
 *
 * When a node is deleted, we need to remove all related records from our table,
 * including all revisions. For the delete operations we use node->nid.
 */
function zendesk_webform_node_delete($node) {
  // Notice that we're deleting even if the content type has no rating enabled.
  db_delete('zendesk_webform_node')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 *
 * This hook is called when an existing node has been changed. We can't simply
 * update, since the node may not have a rating saved, thus no
 * database field. So we first check the database for a rating. If there is one,
 * we update it. Otherwise, we call zendesk_webform_node_insert() to create one.
 */
function zendesk_webform_node_update($node) {
  if (zendesk_webform_language_api_enabled($node)) {
      zendesk_webform_node_delete($node);
      zendesk_webform_node_insert($node);
  }
}

/**
 * helper function to create group list form
 */
function zendesk_webform_list_group_field($default_value, $parent_group="") {
  $response = unserialize(variable_get('zendesk_webform_country_groups', FALSE));
  $group_tlds =  array();
  //iterate through the groups names and create parent list out of it
  if (count($response->groups) > 0) {
    foreach ($response->groups as $id => $group) {
      @list($tld, $subgroup) = explode('.',$group->name);
      //we will only use forms that have a subgroup
      //any others we can ignore
      if ($subgroup) {
        $group_tlds[$tld][$group->id] = $subgroup;
      }
    }
  }
  $form['zendesk'] = array(
    '#type' => 'fieldset',
    '#title' => t('Zendesk Group'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -1,
  );
  $form['zendesk']['zendesk_webform_group'] = array(
    '#type' => 'select',
    '#title' => t(''),
    '#options' => array(0 => 'None') + $group_tlds,
    '#default_value' => $default_value,
    '#description' => t('Select the default country group for zendesk.'),
  );
  return $form;
}

/**
 * Preprocess variables for theming the webform components form.
 */
function template_preprocess_zendesk_webform_components_form(&$variables) {
  $form = $variables['form'];
  $node = $form['#node'];

  $form['components']['#attached']['library'][] = array('webform', 'admin');

  // TODO: Attach these. See http://drupal.org/node/732022.
  drupal_add_tabledrag('webform-components', 'order', 'sibling', 'webform-weight');
  drupal_add_tabledrag('webform-components', 'match', 'parent', 'webform-pid', 'webform-pid', 'webform-cid');

  $header = array(t('Label'), t('Type'), t('Value'), t('Required'), t('Weight'), t('Zendesk'), array('data' => t('Operations'), 'colspan' => 3));
  $rows = array();

  // Add a row containing form elements for a new item.
  unset($form['add']['name']['#title'], $form['add_type']['#description']);
  $form['add']['name']['#attributes']['placeholder'] = t('New component name');
  $form['add']['cid']['#attributes']['class'][] = 'webform-cid';
  $form['add']['pid']['#attributes']['class'][] = 'webform-pid';
  $form['add']['weight']['#attributes']['class'][] = 'webform-weight';
  $row_data = array(
    array('data' => drupal_render($form['add']['name']), 'class' => array('webform-component-name')),
    array('data' => drupal_render($form['add']['type']), 'class' => array('webform-component-type')),
    array('data' => '', 'class' => array('webform-component-value')),
    array('data' => drupal_render($form['add']['required']), 'class' => array('webform-component-required', 'checkbox')),
    array('data' => drupal_render($form['add']['cid']) . drupal_render($form['add']['pid']) . drupal_render($form['add']['weight'])),
    '',
    array('colspan' => 3, 'data' => drupal_render($form['add']['add']), 'class' => array('webform-component-add')),
  );
  $add_form = array('data' => $row_data, 'class' => array('draggable', 'webform-add-form'));

  if (!empty($node->webform['components'])) {
    $component_tree = array();
    $page_count = 1;
    _webform_components_tree_build($node->webform['components'], $component_tree, 0, $page_count);
    $component_tree = _webform_components_tree_sort($component_tree);
    // Build the table rows recursively.
    foreach ($component_tree['children'] as $cid => $component) {
      _zendesk_webform_components_form_rows($node, $cid, $component, 0, $form, $rows, $add_form);
    }
  }
  else {
    $rows[] = array(array('data' => t('No Components, add a component below.'), 'colspan' => 9));
  }

  // Append the add form if not already printed.
  if ($add_form) {
    $rows[] = $add_form;
  }

  $variables['rows'] = $rows;
  $variables['header'] = $header;
  $variables['form'] = $form;
}

/**
 * Recursive function for nesting components into a table.
 *
 * @see preprocess_webform_components_form()
 */
function _zendesk_webform_components_form_rows($node, $cid, $component, $level, &$form, &$rows, &$add_form) {
  // Create presentable values.
  if (drupal_strlen($component['value']) > 30) {
    $component['value'] = drupal_substr($component['value'], 0, 30);
    $component['value'] .= '...';
  }
  $component['value'] = check_plain($component['value']);

  // Remove individual titles from the required and weight fields.
  unset($form['components'][$cid]['required']['#title']);
  unset($form['components'][$cid]['pid']['#title']);
  unset($form['components'][$cid]['weight']['#title']);
  unset($form['components'][$cid]['zendesk_fid']['#title']);
  // Add special classes for weight and parent fields.
  $form['components'][$cid]['cid']['#attributes']['class'] = array('webform-cid');
  $form['components'][$cid]['pid']['#attributes']['class'] = array('webform-pid');
  $form['components'][$cid]['weight']['#attributes']['class'] = array('webform-weight');

  // Build indentation for this row.
  $indents = '';
  for ($n = 1; $n <= $level; $n++) {
    $indents .= '<div class="indentation">&nbsp;</div>';
  }

  // Add each component to a table row.
  $row_data = array(
    array('data' => $indents . filter_xss($component['name']), 'class' => array('webform-component-name')),
    array('data' => $form['add']['type']['#options'][$component['type']], 'class' => array('webform-component-type')),
    array('data' => ($component['value'] == '') ? '-' : $component['value'], 'class' => array('webform-component-value')),
    array('data' => drupal_render($form['components'][$cid]['required']), 'class' => array('webform-component-required', 'checkbox')),
    array('data' => drupal_render($form['components'][$cid]['cid']) . drupal_render($form['components'][$cid]['pid']) . drupal_render($form['components'][$cid]['weight'])),
    drupal_render($form['components'][$cid]['zendesk_fid']),
    array('data' => l(t('Edit'), 'node/' . $node->nid . '/webform/components/' . $cid, array('query' => drupal_get_destination())), 'class' => array('webform-component-edit')),
    array('data' => l(t('Clone'), 'node/' . $node->nid . '/webform/components/' . $cid . '/clone', array('query' => drupal_get_destination())), 'class' => array('webform-component-clone')),
    array('data' => l(t('Delete'), 'node/' . $node->nid . '/webform/components/' . $cid . '/delete', array('query' => drupal_get_destination())), 'class' => array('webform-component-delete')),
  );
  $row_class = array('draggable');
  if (!webform_component_feature($component['type'], 'group')) {
    $row_class[] = 'tabledrag-leaf';
  }
  if ($component['type'] == 'pagebreak') {
    $row_class[] = 'tabledrag-root';
    $row_class[] = 'webform-pagebreak';
    $row_data[0]['class'][] = 'webform-pagebreak';
  }
  $rows[] = array('data' => $row_data, 'class' => $row_class, 'data-cid' => $cid);
  if (isset($component['children']) && is_array($component['children'])) {
    foreach ($component['children'] as $cid => $component) {
      _zendesk_webform_components_form_rows($node, $cid, $component, $level + 1, $form, $rows, $add_form);
    }
  }

  // Add the add form if this was the last edited component.
  if (isset($_GET['cid']) && $component['cid'] == $_GET['cid'] && $add_form) {
    $add_form['data'][0]['data'] = $indents . $add_form['data'][0]['data'];
    $rows[] = $add_form;
    $add_form = FALSE;
  }
}

function _zendesk_webform_fields_cleanup() {
  $user =  unserialize(variable_get('zendesk_webform_user_fields', FALSE));
  $ticket = unserialize(variable_get('zendesk_webform_ticket_fields', FALSE));
  $fields = new stdClass();
  //iterate through the user fields
  if ($user->count >0) {
    //insert name and email as they are core fields
    //that dont get shown in the fields list
    $fields->user["name"]  = "User: Name";
    $fields->user["email"] = "User: Email";
    foreach((array)$user->user_fields as $f){
      $fields->user[$f->key] = "User: ".$f->title;
    }
  }
  if ($ticket->count >0) {
    foreach((array)$ticket->ticket_fields as $f) {
      //other than non removable fields use id
      //default fields we can use their name.
      $id = ($f->removable)? $f->id: $f->type;
      $fields->ticket[$id] = "Ticket: ".$f->title;
    }
    $fields->ticket["tags"] = "Ticket: Tags";
    $fields->ticket["uploads"] = "Ticket: Uploads";
  }

  return $fields;
}

/**
 * Submit handler for the create ticket form.
 *
 * @ingroup forms
 */
function zendesk_webform_ticket_submit($form, &$form_state) {
  $zendesk_fields = _zendesk_webform_fields_cleanup();
  $values  = $form_state['values']['submitted'];
  $node = $form['#node'];

  $ticket = array(
    'group_id'  => $node->zendesk_webform_group,
    'via'       => array('channel' => 'web'),
    'requester' => array(
      'name'  => '',
      'email' => '',
    ),
    'comment' => array('body' => ''),
  );

  //set the group
  $tree = $form_state['webform']['component_tree'];

  foreach($tree['children'] as $component) {
    $zfid  = (isset($component['extra']['zendesk_fid']) && $component['extra']['zendesk_fid']) ? $component['extra']['zendesk_fid'] : FALSE;
    $cname = $component['form_key'];
    if ($zfid && isset($zendesk_fields->user[$zfid])) {
      //name can have multiple value so for now we will make it
      //space seperated
      if ($zfid =='name'){
        $ticket['requester'][$zfid] .= " " . $values[$cname];
        trim($ticket['requester'][$zfid]);
      }
      else if ($zfid =='email') {
        $ticket['requester'][$zfid] = $values[$cname];
      }
      else {
        $ticket['requester']['user_fields'][$zfid] =  $values[$cname];
      }
    }
    else {
      if (!$zfid || $zfid =='description') { //description can have multiple values
        if (is_array($values[$cname])) {
          $values[$cname] = implode(', ', $values[$cname]);
        }
        if (trim($values[$cname])) {
          $ticket['comment']['body'] .= $component['name'] . ': ' . $values[$cname]."\n";
        }
      }
      else if ($zfid =='uploads') {
        if ($values[$cname] !=0) {
          $token = zendesk_webform_upload_files($values[$cname]);
          if ($token) {
            $ticket['comment']['uploads'][] = $token;
          }
        }
      }
      else if ($zfid =='tags') { //tags can have multiple values
        $ticket[$zfid][]= $values[$cname];
      }
      else if (is_numeric($zfid) && $zfid !=0){
        $zval = strtolower($values[$cname]);
        $ticket['custom_fields'][] = array('id' => $zfid, 'value' => $zval);
        //area zipcode requires special treatment
        if ($zfid =='24471191') {
          $short_zip = "short_zip:".substr($zval, 0, 2);
          //store the first 2chars of zip in the short tag field
          //gives us an easy way to assign tickets to regions using triggers
          $ticket['tags'][]=  $short_zip;
        }
      }
      else if ($zfid) {
        $ticket[$zfid] = $values[$cname];
      }
    }
  }

  //check if user already exists using their email, if they do
  //update their user profile before creating the ticket.
  zendesk_webform_requester_update($ticket);

  // Wrap the ticket array in yet another array and call the API.
  $response = zendesk_webform_api_call(array('ticket' => $ticket), 'tickets.json');

  if (isset($response->error)) {
    watchdog('zendesk_webform', t('An error occurred while sending form values to zendesk:  %error.'), array('%error' => json_encode($response)));

  }
}

/**
 * Check if user exists, using email provided.
 * If user exists, update their info.
 * $ticket array of ticket fields.
 * returns boolean
 */
function zendesk_webform_requester_update($ticket) {
  $name  = $ticket['requester']['name'];
  $email = $ticket['requester']['email'];
  $user_fields = isset($ticket['requester']['user_fields']) ? $ticket['requester']['user_fields'] : array();
  //check for a user with the given email
  $request = zendesk_webform_api_call('', "users/search.json?query=$email", 'GET');
  //if a user exists count will be 1 (email is primary key)
  if ($request->count) {
    $user = $request->users['0'];
    $user->name  = $name;
    $user->email = $email;
    if(count($user_fields)>0) {
      foreach($user_fields as $key => $value) {
        $user->user_fields->$key = $value;
      }
    }
    //use the user id as part of the end point
    $endpoint = "users/{$user->id}.json";
    //wrap the user object into user array and update the users info.
    $response = zendesk_webform_api_call(array('user' => $user), $endpoint, 'PUT');
    //if user object is not returned something has gone wrong.
    if (isSet($response->user->id)){
      $output = TRUE;
    }
    else {
      $output = FALSE;
    }
  }
  else {
    $output = FALSE;
  }
  return $output;
}

/**
 * takes file id and uploads files to zendesk return token to store with
 * tickets
 */
function zendesk_webform_upload_files($fid) {
  global $conf;

  $entity = file_load($fid);
  if ($entity) {
    $path = drupal_realpath($entity->uri);
    $file = fopen($path, 'r');
    $filename = $entity->filename;
    $size = $entity->filesize;
    $fildata = fread($file,$size);
    $header = array('Content-type: application/binary');

    $zendesk_key = variable_get('zendesk_webform_api_key', '');
    $zendesk_url = variable_get('zendesk_webform_api_url', '');
    $zendesk_user = variable_get('zendesk_webform_api_user', '');

    $ch = curl_init();
    #curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    #curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
    curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
    curl_setopt($ch, CURLOPT_URL, $zendesk_url . '/api/v2/uploads.json?filename=' . $filename);
    curl_setopt($ch, CURLOPT_USERPWD, "$zendesk_user/token:$zendesk_key");
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    curl_setopt($ch, CURLOPT_INFILE, $file);
    curl_setopt($ch, CURLOPT_INFILESIZE, $size);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
    curl_setopt($ch, CURLOPT_USERAGENT, 'MozillaXYZ/1.0');
    curl_setopt($ch, CURLOPT_POSTFIELDS, $fildata);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);

    //if proxy is set lets tunnel through it
    if (isSet($conf['proxy_server'])) {
      $usrpass = $conf['proxy_username'].':'.$conf['proxy_password'];
      curl_setopt($ch, CURLOPT_HEADER, false);
      curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
      curl_setopt($ch, CURLOPT_PROXYPORT, $conf['proxy_port']);
      curl_setopt($ch, CURLOPT_PROXY, $conf['proxy_server']);
      curl_setopt($ch, CURLOPT_PROXYUSERPWD, $usrpass);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
      curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    }
    $output = curl_exec($ch);
    curl_close($ch);
    $response = json_decode($output);

    return (isset($response->upload->token) && $response->upload->token) ? $response->upload->token : FALSE;
  }
  return FALSE;
}

function zendesk_webform_cron() {
  module_load_include('inc', 'zendesk_webform', 'zendesk_webform.admin');
  return zendesk_webform_cache_fields(TRUE);
}
